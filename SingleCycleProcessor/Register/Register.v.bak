module register_file_64bit (
    input wire clk,
    input wire rst,
    input wire [4:0] read_addr1,
    input wire [4:0] read_addr2,
    input wire [4:0] write_addr,
    input wire [63:0] write_data,
    input wire write_enable,
    output wire [63:0] read_data1,
    output wire [63:0] read_data2
);

    reg [63:0] registers [0:31];

    assign read_data1 = (read_addr1 == 5'b00000) ? 64'b0 : registers[read_addr1];
    assign read_data2 = (read_addr2 == 5'b00000) ? 64'b0 : registers[read_addr2];

    always @(posedge clk or posedge rst) 
	 begin
        if (rst) 
		  begin
            integer i;
            for (i = 0; i < 32; i = i + 1) 
				begin
                registers[i] <= 64'b0;
            end
        end 
		  else if (write_enable && write_addr != 5'b00000) 
		  begin
            registers[write_addr] <= write_data;
        end
    end

endmodule